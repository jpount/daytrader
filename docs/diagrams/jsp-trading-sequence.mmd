sequenceDiagram
    title JSP-to-Java Component Interaction - Complete Trading Flow
    
    participant User
    participant Browser
    participant OrderFilter as OrdersAlertFilter
    participant AppServlet as TradeAppServlet
    participant TSA as TradeServletAction
    participant Quote as quote.jsp
    participant DisplayQuote as displayQuote.jsp
    participant TradeAction
    participant SLSB as TradeSLSBBean
    participant JPA as JPA Layer
    participant DB as Database
    participant Queue as JMS Queue
    participant MDB
    
    %% Login and Session Creation
    rect rgb(240, 255, 240)
        Note over User,DB: User Authentication Flow
        
        User->>Browser: Navigate to app
        Browser->>OrderFilter: GET /app
        OrderFilter->>AppServlet: Check session
        AppServlet->>TSA: No session
        TSA->>Browser: Forward to welcome.jsp
        Browser->>User: Show login form
        
        User->>Browser: Enter credentials
        Browser->>OrderFilter: POST /app?action=login
        OrderFilter->>AppServlet: Process request
        AppServlet->>TSA: doLogin(uid, passwd)
        TSA->>TradeAction: login(uid, passwd)
        TradeAction->>SLSB: login(uid, passwd)
        SLSB->>JPA: Find AccountProfile
        JPA->>DB: SELECT FROM ACCOUNTPROFILEEJB
        DB-->>JPA: Profile data
        JPA-->>SLSB: AccountProfileDataBean
        SLSB->>SLSB: Validate password
        SLSB->>SLSB: Update login stats
        SLSB-->>TradeAction: AccountDataBean
        TradeAction-->>TSA: Account data
        TSA->>TSA: Create session
        TSA->>TSA: setAttribute("uidBean", uid)
        TSA-->>Browser: Forward to tradehome.jsp
        Browser-->>User: Trading dashboard
    end
    
    %% Quote Lookup Flow
    rect rgb(240, 240, 255)
        Note over User,DB: Quote Lookup and Display
        
        User->>Browser: Click "Quotes/Trade"
        Browser->>OrderFilter: GET /app?action=quotes&symbols=s:0,s:1
        
        OrderFilter->>OrderFilter: Check closed orders
        OrderFilter->>AppServlet: Set closedOrders attribute
        
        AppServlet->>TSA: doQuotes(symbols)
        TSA->>TSA: Parse symbols
        TSA->>TSA: setAttribute("symbols", symbolList)
        TSA->>Quote: Forward request
        
        Quote->>Quote: Process closedOrders
        Quote->>Quote: Display order alerts
        
        loop For each symbol
            Quote->>DisplayQuote: Include displayQuote.jsp
            DisplayQuote->>TradeAction: new TradeAction()
            DisplayQuote->>TradeAction: getQuote(symbol)
            TradeAction->>SLSB: getQuote(symbol)
            SLSB->>JPA: Find QuoteDataBean
            JPA->>DB: SELECT FROM QUOTEEJB
            DB-->>JPA: Quote data
            JPA-->>SLSB: QuoteDataBean
            SLSB-->>TradeAction: Quote
            TradeAction-->>DisplayQuote: QuoteDataBean
            DisplayQuote->>DisplayQuote: Calculate gain/loss
            DisplayQuote->>DisplayQuote: Format display
            DisplayQuote-->>Quote: Rendered HTML
        end
        
        Quote-->>Browser: Complete page
        Browser-->>User: Show quotes
    end
    
    %% Buy Order Flow
    rect rgb(255, 240, 240)
        Note over User,MDB: Buy Order Processing
        
        User->>Browser: Click "buy" on quote
        Browser->>OrderFilter: GET /app?action=buy&symbol=s:0&quantity=100
        
        OrderFilter->>AppServlet: Process request
        AppServlet->>TSA: doBuy(uid, symbol, quantity)
        
        TSA->>TradeAction: buy(uid, symbol, quantity, orderProcessingMode)
        
        alt Synchronous Processing
            TradeAction->>SLSB: buy(uid, symbol, quantity)
            SLSB->>JPA: Get account
            SLSB->>JPA: Get quote
            SLSB->>JPA: Create OrderDataBean
            SLSB->>JPA: Create HoldingDataBean
            SLSB->>JPA: Update account balance
            SLSB->>DB: BEGIN TRANSACTION
            JPA->>DB: INSERT INTO ORDEREJB
            JPA->>DB: INSERT INTO HOLDINGEJB
            JPA->>DB: UPDATE ACCOUNTEJB
            DB-->>JPA: Success
            SLSB->>DB: COMMIT
            SLSB-->>TradeAction: OrderDataBean
        else Asynchronous Processing
            TradeAction->>SLSB: buy(uid, symbol, quantity)
            SLSB->>JPA: Create OrderDataBean (status=open)
            JPA->>DB: INSERT INTO ORDEREJB
            SLSB->>Queue: Send order message
            Queue-->>MDB: onMessage (async)
            SLSB-->>TradeAction: Open OrderDataBean
            
            Note over MDB: Async completion
            MDB->>SLSB: completeOrder(orderID)
            SLSB->>JPA: Update order status
            SLSB->>JPA: Create holding
            SLSB->>JPA: Update balance
        end
        
        TradeAction-->>TSA: Order result
        TSA->>TSA: setAttribute("orderData", order)
        TSA->>Browser: Forward to order.jsp
        Browser-->>User: Order confirmation
    end
    
    %% Portfolio View Flow
    rect rgb(255, 255, 240)
        Note over User,DB: Portfolio Display
        
        User->>Browser: Click "Portfolio"
        Browser->>OrderFilter: GET /app?action=portfolio
        
        OrderFilter->>OrderFilter: Check closed orders
        OrderFilter->>AppServlet: Process with alerts
        
        AppServlet->>TSA: doPortfolio(uid)
        
        TSA->>TradeAction: getHoldings(uid)
        TradeAction->>SLSB: getHoldings(uid)
        
        SLSB->>JPA: Get account
        JPA->>DB: SELECT FROM ACCOUNTEJB
        SLSB->>JPA: Get holdings
        JPA->>DB: SELECT FROM HOLDINGEJB
        DB-->>JPA: Holdings list
        
        loop For each holding
            SLSB->>JPA: Get current quote
            JPA->>DB: SELECT FROM QUOTEEJB
            DB-->>JPA: Quote data
        end
        
        SLSB-->>TradeAction: Holdings collection
        TradeAction-->>TSA: Holdings data
        
        TSA->>TSA: setAttribute("holdingDataBeans", holdings)
        TSA->>TSA: Calculate totals
        TSA->>Browser: Forward to portfolio.jsp
        
        Browser-->>User: Portfolio display
    end
    
    %% Component Relationships Legend
    rect rgb(245, 245, 245)
        Note over User,MDB: Component Types and Relationships
        Note left of OrderFilter: @WebFilter - Intercepts all /app requests
        Note left of AppServlet: @WebServlet("/app") - Main controller
        Note left of TSA: Action handler - Request dispatcher
        Note left of Quote: View layer - Presentation logic
        Note left of TradeAction: Business facade - Service routing
        Note left of SLSB: @Stateless EJB - Transaction management
        Note left of JPA: Persistence layer - Entity management
        Note left of DB: Apache Derby - Data storage
        Note left of Queue: JMS Queue - Async messaging
        Note left of MDB: @MessageDriven - Async processor
    end