sequenceDiagram
    participant User as User/Browser
    participant JSP as order.jsp
    participant Servlet as TradeAppServlet
    participant Action as TradeServletAction
    participant Trade as TradeAction
    participant SLSB as TradeSLSBBean
    participant EM as EntityManager
    participant DB as Derby Database
    participant JMS as JMS Provider
    participant MDB as DTBroker3MDB
    participant Notif as TradeStreamerMDB

    Note over User, Notif: Stock Trading Transaction Flow - Buy Order Example
    
    %% 1. User initiates buy order
    User->>JSP: Navigate to /daytrader/app?action=quotes
    JSP->>User: Display stock quote page
    User->>JSP: Enter buy order (symbol, quantity)
    JSP->>Servlet: POST /app?action=buy&symbol=IBM&quantity=100
    
    %% 2. Web tier processing
    Servlet->>Action: doBuy(userID, symbol, quantity)
    Action->>Trade: new TradeAction()
    Action->>Trade: buy(userID, symbol, quantity, orderProcessingMode)
    
    %% 3. Service layer delegation
    Trade->>SLSB: buy(userID, symbol, quantity, mode)
    Note over Trade, SLSB: TradeAction delegates to EJB based on runtime mode
    
    %% 4. Business logic processing
    SLSB->>EM: find(AccountProfileDataBean, userID)
    EM->>DB: SELECT FROM accountprofileejb WHERE userid=?
    DB-->>EM: AccountProfile data
    EM-->>SLSB: AccountProfile entity
    
    SLSB->>EM: profile.getAccount()
    Note over SLSB, EM: Lazy loading of Account relationship
    EM->>DB: SELECT FROM accountejb WHERE profile_userid=?
    DB-->>EM: Account data
    EM-->>SLSB: Account entity
    
    SLSB->>EM: find(QuoteDataBean, symbol)
    EM->>DB: SELECT FROM quoteejb WHERE symbol=?
    DB-->>EM: Quote data
    EM-->>SLSB: Quote entity
    
    %% 5. Order creation and validation
    SLSB->>SLSB: createOrder(account, quote, null, "buy", quantity)
    Note over SLSB: Creates OrderDataBean with PENDING status
    SLSB->>EM: persist(order)
    EM->>DB: INSERT INTO orderejb
    DB-->>EM: Order ID generated
    EM-->>SLSB: Persisted order with ID
    
    %% 6. Account balance validation and update
    SLSB->>SLSB: Calculate total = (quantity * price) + orderFee
    SLSB->>SLSB: Validate account.balance >= total
    
    alt Sufficient Funds
        SLSB->>SLSB: account.setBalance(balance - total)
        SLSB->>EM: merge(account)
        EM->>DB: UPDATE accountejb SET balance=?
        DB-->>EM: Success
        
        %% 7. Order processing mode routing
        alt Synchronous Processing (orderProcessingMode == SYNCH)
            SLSB->>SLSB: completeOrder(orderID, twoPhase)
            SLSB->>SLSB: Create HoldingDataBean
            SLSB->>EM: persist(holding)
            EM->>DB: INSERT INTO holdingejb
            SLSB->>SLSB: order.setOrderStatus("completed")
            SLSB->>EM: merge(order)
            EM->>DB: UPDATE orderejb SET orderstatus="completed"
            
        else Asynchronous Processing (orderProcessingMode == ASYNCH)
            SLSB->>SLSB: queueOrder(orderID, twoPhase)
            SLSB->>JMS: Send message to TradeBrokerQueue
            Note over SLSB, JMS: Message contains orderID, twoPhase, direct flags
            JMS-->>SLSB: Message queued
            
            %% Asynchronous processing branch
            JMS->>MDB: onMessage("neworder")
            MDB->>MDB: Extract orderID from message
            MDB->>SLSB: completeOrder(orderID, twoPhase)
            SLSB->>EM: find(OrderDataBean, orderID)
            EM->>DB: SELECT FROM orderejb WHERE orderid=?
            DB-->>EM: Order data
            EM-->>SLSB: Order entity
            
            SLSB->>SLSB: Create HoldingDataBean from order
            SLSB->>EM: persist(holding)
            EM->>DB: INSERT INTO holdingejb
            SLSB->>SLSB: order.setOrderStatus("completed")
            SLSB->>EM: merge(order)
            EM->>DB: UPDATE orderejb SET orderstatus="completed"
            MDB-->>JMS: Message processing complete
        end
        
    else Insufficient Funds
        SLSB->>SLSB: order.setOrderStatus("cancelled")
        SLSB->>SLSB: order.setCompletionDate(now)
        SLSB->>EM: merge(order)
        EM->>DB: UPDATE orderejb SET orderstatus="cancelled"
        Note over SLSB: Account balance not modified for cancelled orders
    end
    
    %% 8. Quote price and volume update
    SLSB->>SLSB: updateQuotePriceVolume(symbol, changeFactor, quantity)
    SLSB->>EM: createNamedQuery("quoteejb.quoteForUpdate")
    EM->>DB: SELECT * FROM quoteejb WHERE symbol=? FOR UPDATE
    DB-->>EM: Quote data (locked)
    EM-->>SLSB: Quote entity for update
    
    SLSB->>SLSB: Calculate newPrice = changeFactor * oldPrice
    SLSB->>SLSB: quote.setPrice(newPrice)
    SLSB->>SLSB: quote.setVolume(volume + quantity)
    SLSB->>EM: merge(quote)
    EM->>DB: UPDATE quoteejb SET price=?, volume=?
    DB-->>EM: Update complete
    
    %% 9. Market data streaming (optional)
    SLSB->>SLSB: publishQuotePriceChange(quote, oldPrice, changeFactor, quantity)
    SLSB->>JMS: Send to TradeStreamerTopic
    JMS->>Notif: onMessage("pricechange")
    Note over Notif: TradeStreamerMDB handles market data updates
    Notif->>Notif: Process market data notification
    
    %% 10. Response flow
    SLSB-->>Trade: OrderDataBean (with status and details)
    Trade-->>Action: OrderDataBean
    Action->>Action: req.setAttribute("orderData", orderData)
    Action->>Action: requestDispatch to order.jsp
    Action-->>Servlet: Forward to order.jsp
    Servlet->>JSP: Display order confirmation
    JSP->>User: Show order status and details
    
    %% Error handling flows
    Note over User, Notif: Error Handling Scenarios
    
    alt Database Constraint Violation
        EM->>DB: INSERT/UPDATE operation
        DB-->>EM: Constraint violation error
        EM-->>SLSB: PersistenceException
        SLSB-->>Trade: EJBException
        Trade-->>Action: Exception caught
        Action->>Action: Log error and set error message
        Action->>JSP: Forward to error page
        JSP->>User: Display error message
    end
    
    alt JMS Message Delivery Failure
        SLSB->>JMS: Send message to queue
        JMS-->>SLSB: JMSException
        SLSB-->>Trade: EJBException
        Trade-->>Action: Exception propagated
        Note over Action: Order remains in pending state for retry
    end
    
    alt MDB Processing Failure
        MDB->>SLSB: completeOrder(orderID, twoPhase)
        SLSB-->>MDB: Exception during completion
        MDB->>MDB: mdc.setRollbackOnly()
        MDB->>JMS: Message rolled back to queue
        Note over MDB: Message will be redelivered for retry
    end

    %% Performance monitoring
    Note over User, Notif: Performance and Monitoring
    
    MDB->>MDB: TimerStat.addTiming("DTBroker3MDB:neworder")
    MDB->>MDB: Log statistics every 10000 orders
    SLSB->>SLSB: Log.trace() for debugging
    Action->>Action: Update benchmark statistics