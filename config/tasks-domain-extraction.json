{
  "id": "09a-domain-extraction",
  "name": "Domain Extraction and Strangler Fig Analysis",
  "description": "Identify bounded contexts and create strangler fig extraction plan",
  "prompt": "Analyze the codebase to identify domain boundaries and create a strangler fig extraction plan:\n\n1. Domain Discovery:\n   - Identify distinct business domains/bounded contexts\n   - Look for natural boundaries in:\n     * Package/namespace organization\n     * Database schema (tables that cluster together)\n     * API endpoints that serve related functions\n     * Business logic that operates on related entities\n     * Teams or documentation that suggest ownership\n\n2. For Each Identified Domain:\n   - Domain name and business purpose\n   - Core entities/aggregates\n   - Business operations/use cases\n   - Data tables/collections used\n   - API endpoints serving this domain\n   - Dependencies on other domains\n   - External system integrations\n\n3. Domain Coupling Analysis:\n   - Identify tight coupling between domains\n   - Database-level coupling (foreign keys, joins)\n   - Code-level coupling (direct calls)\n   - Shared data structures\n   - Transaction boundaries that span domains\n\n4. Extraction Difficulty Assessment:\n   For each domain, rate extraction difficulty (Easy/Medium/Hard) based on:\n   - Coupling level with other domains\n   - Database entanglement\n   - Shared transaction requirements\n   - UI complexity\n   - External system dependencies\n\n5. Strangler Fig Sequencing:\n   Recommend extraction order based on:\n   - Business value of modernizing each domain\n   - Technical isolation (least coupled first)\n   - Risk level (lowest risk first)\n   - Team readiness\n   - Quick wins vs strategic domains\n\n6. For Each Domain - Extraction Strategy:\n   - Extraction pattern (API Gateway, Event Interception, Database View, etc.)\n   - Data synchronization approach\n   - API facade design\n   - Gradual migration steps\n   - Rollback strategy\n\n7. Anti-Corruption Layer Design:\n   - Interface definitions between legacy and new\n   - Data transformation requirements\n   - Event translation needs\n   - Temporary dual-write strategies\n\n8. Create Visualizations:\n   - Domain boundary diagram\n   - Domain dependency graph\n   - Extraction sequence timeline\n   - Target microservices architecture\n\nExample domains to look for:\n- User Management (authentication, profiles, preferences)\n- Product Catalog (items, categories, inventory)\n- Order Management (cart, checkout, order processing)\n- Payment Processing (transactions, billing, invoicing)\n- Reporting/Analytics (dashboards, metrics, reports)\n- Notification System (emails, alerts, messaging)\n- Search (product search, filters, recommendations)\n\nSave analysis to: docs/modernization/domain-extraction-plan.md\nSave diagrams to: docs/diagrams/domain-*.mmd",
  "outputFile": "docs/modernization/domain-extraction-plan.md",
  "additionalOutputs": ["docs/diagrams/domain-boundaries.mmd", "docs/diagrams/domain-dependencies.mmd", "docs/diagrams/extraction-sequence.mmd"],
  "status": "pending"
}